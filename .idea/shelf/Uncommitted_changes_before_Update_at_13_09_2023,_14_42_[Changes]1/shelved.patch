Index: client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\nimport concurrent.futures\nfrom utils import port\n\nport = port\n\n\ndef client():\n    # Создание объекта сокета\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Подключение к серверу\n    server_address = ('localhost', port)\n    client_socket.connect(server_address)\n\n    # Отправка данных на сервер\n    while True:\n        try:\n            message = input('Введите сообщение: ')\n            client_socket.sendall(message.encode())\n\n            if message in ('exit', 'break', 'quit', 'q'):\n                break\n        except:\n            break\n\n    # Закрытие соединения\n    client_socket.close()\n\n\n# Создание пула потоков\nwith concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:\n    # Запуск клиентов\n    futures = [executor.submit(client) for _ in range(100)]\n\n    # Ожидание завершения всех клиентов\n    concurrent.futures.wait(futures)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client.py b/client.py
--- a/client.py	
+++ b/client.py	
@@ -29,9 +29,9 @@
 
 
 # Создание пула потоков
-with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
+with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
     # Запуск клиентов
-    futures = [executor.submit(client) for _ in range(100)]
+    futures = [executor.submit(client) for _ in range(1)]
 
     # Ожидание завершения всех клиентов
     concurrent.futures.wait(futures)
